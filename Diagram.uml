@startuml
skinparam classAttributeIconSize 0

Package base{
  class Block
  class FixedStructure
  class MobileStructure
  class PlayableStructure
  class PlayableStructureInvL
  class PlayableStructureInvZ
  class PlayableStructureL
  class PlayableStructureLine
  class PlayableStructureSquare
  class PlayableStructureT
  class PlayableStructureZ
  class Randomizer
  class Structure
}

Package time{
  class Timer
  class Time
}

Structure	*-- Block
Structure	<|-left- FixedStructure
Structure <|-- MobileStructure
MobileStructure <|-- PlayableStructure
PlayableStructure <|-left- PlayableStructureInvL
PlayableStructure <|-- PlayableStructureL
PlayableStructure <|-- PlayableStructureInvZ
PlayableStructure <|-right- PlayableStructureZ
PlayableStructure <|-- PlayableStructureLine
PlayableStructure <|-- PlayableStructureT
PlayableStructure <|-- PlayableStructureSquare
Runnable <|.down. Timer
Randomizer *.. PlayableStructure

interface Runnable<<Interface>>{ 

}

Package gamestates{
  class GameState
  class MenuState
  class State
}

State <|-- GameState
State <|-- MenuState
GameState *-- Timer
GameState *-up- FixedStructure
GameState *-left- PlayableStructure
GameState *-up- Randomizer

Package io{
  class Display
  class KeyManager
}

interface KeyListener<<Interface>>{

}

 KeyListener <|.. KeyManager

KeyManager o-- Time
State *-- KeyManager  

class Block{
  {static}-SIDE:int
  -color:Color
  __
  ..Constructor..
  +Block
  +Block(color:Color)
  ..Getter & Setter..
  +setColor(color:Color)
  +getColor():Color
  {static}+getSIDE():int
  ..
  +render(x:int, y:int, g:Graphics)
}

class FixedStructure{
  {static}-DEFAULT_WIDTH:int
  {static}-DEFAULT_HEIGHT:int
  -width:int
  -height:int
  __
  ..Constructor..
  +FixedStructure()
  +FixedStructure(posX:int, posY:int, width:int, height:int)
  ..Override..
  +blockExists(x:int, y:int):boolean
  ..Getter & Setter..
  +setBlock(x:int, y:int, block:Block)
  +getWidth():int
  +getHeight():int
  +setWidth(width:int)
  +setHeight(height:int)
  ..
  +addBlocks(mobileStructure:MobileStructure)
  +addBlocks(mobileStructure:PlayableStructure)
  +swapBlocks(linha:int):Clock[][]
  +cleanLine(linha:int)
  +blockExistsDown(mobileStructure:PlayableStructure):boolean
  +blockExistsDown(mobileStructure:MobileStructure):boolean
  +lineIsComplete(linha:int):boolean
  +render(displayHeight:int, g:Graphics)
}

class MobileStructure{
  __
  ..Constructor..
  +MobileStructure(posX:int, posY:int, blocks:Block[][])
  ..
  +moveY(y:int, fixedStructure:FixedStructure):boolean
}

class PlayableStructure{
  {static}#SIZE:int
  __
  ..Constructor..
  +PlayableStructure(components:Block[][])
  +PlayableStructure(x:int, y:int)
  ..Override..
  +moveY(deltaY:int, fixedStructure:FixedStructure):boolean
  ..
  +moveX(deltaX:int, fixedStructure:FixedStructure)
  +rotate(fixedStructure:FixedStructure)
  -gameOver(fixedStructure:FixedStructure):boolean
  -existsSuperposition(fixedStructure:FixedStructure, playableStructure:PlayableStructure)
  -existsSuperposition(fixedStructure:FixedStructure, tempBlock:Block[][])
  +render(displayHeight:int, g:Graphics)
}

class PlayableStructureInvL{
  {static}-COLOR:Color
  __
  ..Constructor..
  +PlayableStructureInvL(x:int,y:int)
}

class PlayableStructureInvZ{
  {static}-COLOR:Color
  __
  ..Constructor..
  +PlayableStructureInvZ(x:int,y:int)
}

class PlayableStructureL{
  {static}-COLOR:Color
  __
  ..Constructor..
  +PlayableStructureL(x:int,y:int)
}

class PlayableStructureLine{
  {static}-COLOR:Color
  __
  ..Constructor..
  +PlayableStructureLine(x:int,y:int)
}

class PlayableStructureSquare{
  {static}-COLOR:Color
  __
  ..Constructor..
  +PlayableStructureSquare(x:int,y:int)
  ..Override..
  +rotate(fixedStructure:FixedStructure)
}

class PlayableStructureT{
  {static}-COLOR:Color
  __
  ..Constructor..
  +PlayableStructureT(x:int,y:int)
}

class PlayableStructureZ{
  {static}-COLOR:Color
  __
  ..Constructor..
  +PlayableStructureZ(x:int,y:int)
}

class Randomizer{
  __
  +getRandomPiece(posX:int, posY:int):PlayableStructure
}

class Structure{
  -blocks[][]:blocks
  -posX:int
  -posY:int
  __
  ..Getter & Setter..
  +setBlocks(blocks[][]:Block)
  +setPosX(posX:int)
  +setPosY(posY:int)
  +getBlocks():Block[][]
  +getPosX():int
  +getPosY():int
  ..
  +blockExists(x:int, y:int):boolean
}

class Timer{
  -triggered:boolean
  -deltaT:int
  __
  ..Constructor..
  +Timer(deltaT:int)
  ..Override..
  +run()
  ..
  +isTriggered():boolean
  +reset()
}

class GameState{
  -fixedStructure:FixedStructure
  -playableStructure:PlayableStructure
  -INITIAL_POS_X:int
  -INITIAL_POS_Y:int
  -BORDER_SIZE_X:int
  -BORDER_SIZE_Y:int
  -timerThread:Thread
  -timer:Timer
  -randomizer:Randomizer
  __
  ..Constructor..
  +GameState()
  ..Override..
  +update()
  +render(g:Graphics)
  ..
  +updateKeys():boolean[]

}

class MenuState{
  __
  -incrementGameMode(increment:int)
  ..Override..
  +update()
  +render(g:Graphics)
}

abstract class State<<Abstract>>{
  {static}-currentState
  {static}-keyManager
  {static}-gameMode
  __
  ..Getter & Setter..
  {static}+setState(state:State)
  {static}+getState():State
  {static}+setKeyManager(keyManager:KeyManager)
  {static}+getKeyManager():KeyManager
  {static}+setGameMode(gameMode:int)
  {static}+getGameMode():int
  ..Abstract..
  {abstract}+update()
  {abstract}+render(g:Graphics)
}

class KeyManager{
  -down:boolean
  -left:boolean
  -right:boolean
  -zero:boolean
  -justPressedLeft:boolean
  -justPressedRight:boolean
  -justPressedDown:boolean
  -justPressedZero:boolean
  -last:double
  -interval:double
  __
  ..Constructor..
  +KeyManager()
  ..Override..
  +keyPressed(event:KeyEvent)
  +keyReleased(event:KeyEvent)
  +keyTyped(event:KeyEvent)
  ..Getter & Setter..
  -setKey(event:KeyEvent, state:boolean)
  +getDown():boolean
  +getLeft():boolean
  +getRight():boolean
  +getZero():boolean
}

class Display{
  -frame:JFrame
  -canvas:Canvas
  -title:String
  -width:int
  -height:int
  __
  ..Constructor..
  +Display(title:String, width:int, height:int)
  ..Getter..
  +getCanvas():Canvas
  +getFrame():JFrame
  +getWidth():int
  +getHeight():int
  ..
  -createDisplay()
}

class Time<<Singleton>>{
  {static}+fps:int
  {static}+timePerTick:double
  {static}+delta:double
  {static}+now:long
  {static}+lastTime:long
  {static}+timer:long
  {static}+ticks:int
  __
  ..Constructor..
  -Time()
  ..
  {static}+update()
  {static}+updateTimer()
  {static}+updateTicksDelta()
  {static}+getTime():Time
  {static}+getDelta():double
  {static}+getNow():long
  {static}+getTimePerTick():double
}

Runnable <|.. Game
Game *-- KeyManager
Game *-- Display
Game *-- State
class Game {
  -display:Display
  -width:int
  -height:int
  +title:String
  -running:boolean
  -thread:Thread
  -bs:BufferStrategy
  -g:Graphics
  +gameState:State
  +menuState:State
  -keyManager:KeyManager
  __
  ..Constructor..
  +Game(title:String)
  ..Synchronized..
  +start()
  +stop()
  ..Override..
  +run()
  ..
  -init()
  -update()
  -render()
  +getKeyManager:KeyManager
  +getWidth():int
  +getHeight():int
  +getDisplay():Display
}

Tetris *.. Game

class Tetris {
  __
  {static}+main(args:String[])
}

@enduml
